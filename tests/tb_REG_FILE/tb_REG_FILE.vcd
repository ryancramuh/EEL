$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module tb_REG_FILE $end
  $var wire 1 H CLK $end
  $var wire 5 C ADDR1 [4:0] $end
  $var wire 5 D ADDR2 [4:0] $end
  $var wire 5 E W_ADDR [4:0] $end
  $var wire 1 F W_EN $end
  $var wire 32 G W_DATA [31:0] $end
  $scope module UUT $end
   $var wire 1 H CLK $end
   $var wire 5 C ADDR1 [4:0] $end
   $var wire 5 D ADDR2 [4:0] $end
   $var wire 5 E W_ADDR [4:0] $end
   $var wire 1 F W_EN $end
   $var wire 32 G W_DATA [31:0] $end
   $var wire 32 I RS1 [31:0] $end
   $var wire 32 J RS2 [31:0] $end
   $var wire 32 # reg_32x32[0] [31:0] $end
   $var wire 32 $ reg_32x32[1] [31:0] $end
   $var wire 32 % reg_32x32[2] [31:0] $end
   $var wire 32 & reg_32x32[3] [31:0] $end
   $var wire 32 ' reg_32x32[4] [31:0] $end
   $var wire 32 ( reg_32x32[5] [31:0] $end
   $var wire 32 ) reg_32x32[6] [31:0] $end
   $var wire 32 * reg_32x32[7] [31:0] $end
   $var wire 32 + reg_32x32[8] [31:0] $end
   $var wire 32 , reg_32x32[9] [31:0] $end
   $var wire 32 - reg_32x32[10] [31:0] $end
   $var wire 32 . reg_32x32[11] [31:0] $end
   $var wire 32 / reg_32x32[12] [31:0] $end
   $var wire 32 0 reg_32x32[13] [31:0] $end
   $var wire 32 1 reg_32x32[14] [31:0] $end
   $var wire 32 2 reg_32x32[15] [31:0] $end
   $var wire 32 3 reg_32x32[16] [31:0] $end
   $var wire 32 4 reg_32x32[17] [31:0] $end
   $var wire 32 5 reg_32x32[18] [31:0] $end
   $var wire 32 6 reg_32x32[19] [31:0] $end
   $var wire 32 7 reg_32x32[20] [31:0] $end
   $var wire 32 8 reg_32x32[21] [31:0] $end
   $var wire 32 9 reg_32x32[22] [31:0] $end
   $var wire 32 : reg_32x32[23] [31:0] $end
   $var wire 32 ; reg_32x32[24] [31:0] $end
   $var wire 32 < reg_32x32[25] [31:0] $end
   $var wire 32 = reg_32x32[26] [31:0] $end
   $var wire 32 > reg_32x32[27] [31:0] $end
   $var wire 32 ? reg_32x32[28] [31:0] $end
   $var wire 32 @ reg_32x32[29] [31:0] $end
   $var wire 32 A reg_32x32[30] [31:0] $end
   $var wire 32 B reg_32x32[31] [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000 C
b00000 D
b00000 E
0F
b00000000000000000000000000000000 G
0H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
#5000
#10000
b00001 D
b00001 E
b11011110101011011011111011101111 G
1H
#15000
0H
#20000
b00010 D
1F
1H
#25000
0H
#30000
b11011110101011011011111011101111 $
b00001 D
b10111110111011111111111011101101 G
1H
b11011110101011011011111011101111 J
#35000
0H
#40000
b10111110111011111111111011101101 $
1H
b10111110111011111111111011101101 J
#45000
0H
#50000
1H
