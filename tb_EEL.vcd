$date
	Mon Sep  8 07:09:40 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_EEL $end
$var reg 1 ! CLK $end
$var reg 1 " RST $end
$scope module UUT $end
$var wire 1 ! CLK $end
$var wire 1 " RST $end
$var wire 1 # zero $end
$var wire 32 $ w_data [31:0] $end
$var wire 1 % stall $end
$var wire 32 & srcb_fwd [31:0] $end
$var wire 32 ' srca_fwd [31:0] $end
$var wire 2 ( src_b_sel [1:0] $end
$var wire 1 ) src_a_sel $end
$var wire 1 * sign $end
$var wire 32 + rs2_fwd [31:0] $end
$var wire 32 , rs2 [31:0] $end
$var wire 32 - rs1_fwd [31:0] $end
$var wire 32 . rs1 [31:0] $end
$var wire 2 / rf_sel [1:0] $end
$var wire 1 0 reg_write $end
$var wire 2 1 pc_sel [1:0] $end
$var wire 32 2 pc_out [31:0] $end
$var wire 32 3 pc_in [31:0] $end
$var wire 32 4 next_pc [31:0] $end
$var wire 1 5 mem_write $end
$var wire 1 6 mem_read $end
$var wire 1 7 jump $end
$var wire 32 8 ir [31:0] $end
$var wire 3 9 imm_sel [2:0] $end
$var wire 32 : imm [31:0] $end
$var wire 1 ; fwd_srcb $end
$var wire 1 < fwd_srca $end
$var wire 2 = fwd_rs2 [1:0] $end
$var wire 2 > fwd_rs1 [1:0] $end
$var wire 1 ? fwd_din $end
$var wire 1 @ flush $end
$var wire 32 A dout [31:0] $end
$var wire 32 B din_fwd [31:0] $end
$var wire 2 C decoder_pc_sel [1:0] $end
$var wire 2 D byte_sel [1:0] $end
$var wire 1 E branch $end
$var wire 3 F br_type [2:0] $end
$var wire 32 G alu_result [31:0] $end
$var wire 32 H alu_op_b [31:0] $end
$var wire 32 I alu_op_a [31:0] $end
$var wire 4 J alu_fun [3:0] $end
$var reg 267 K de [266:0] $end
$var reg 267 L em [266:0] $end
$var reg 267 M fd [266:0] $end
$var reg 267 N mw [266:0] $end
$scope module ALU_SRC_A $end
$var wire 32 O D1 [31:0] $end
$var wire 1 P SEL $end
$var wire 32 Q D0 [31:0] $end
$var parameter 32 R n $end
$var reg 32 S DOUT [31:0] $end
$upscope $end
$scope module ALU_SRC_B $end
$var wire 32 T D1 [31:0] $end
$var wire 32 U D2 [31:0] $end
$var wire 32 V D3 [31:0] $end
$var wire 2 W SEL [1:0] $end
$var wire 32 X D0 [31:0] $end
$var parameter 32 Y n $end
$var reg 32 Z DOUT [31:0] $end
$upscope $end
$scope module CTRL_UNIT $end
$var wire 3 [ FUNC3 [2:0] $end
$var wire 1 \ FUNC7 $end
$var wire 7 ] OPCODE [6:0] $end
$var reg 4 ^ ALU_FUN [3:0] $end
$var reg 1 E BRANCH $end
$var reg 3 _ BR_TYPE [2:0] $end
$var reg 2 ` BYTE_SEL [1:0] $end
$var reg 3 a IMM_SEL [2:0] $end
$var reg 1 7 JUMP $end
$var reg 1 6 MEM_READ $end
$var reg 1 5 MEM_WRITE $end
$var reg 2 b PC_SEL [1:0] $end
$var reg 1 0 REG_WRITE $end
$var reg 2 c RF_SEL [1:0] $end
$var reg 1 * SIGN $end
$var reg 1 ) SRC_A_SEL $end
$var reg 2 d SRC_B_SEL [1:0] $end
$upscope $end
$scope module DATA_MEMORY $end
$var wire 14 e ADDR [13:0] $end
$var wire 2 f BYTE_SEL [1:0] $end
$var wire 1 ! CLK $end
$var wire 1 g RDEN $end
$var wire 1 h SIGN $end
$var wire 1 i WEN $end
$var wire 14 j actual_addr [13:0] $end
$var wire 32 k DATA_IN [31:0] $end
$var parameter 32 l ADDR_DEPTH $end
$var parameter 32 m ADDR_WIDTH $end
$var parameter 14 n DATA_MEM_BASE $end
$var reg 32 o DATA_OUT [31:0] $end
$var reg 32 p data_in [31:0] $end
$var reg 32 q data_out [31:0] $end
$upscope $end
$scope module EEL_ALU $end
$var wire 4 r ALU_FUN [3:0] $end
$var wire 32 s OP_A [31:0] $end
$var wire 32 t OP_B [31:0] $end
$var wire 1 # ZERO $end
$var parameter 32 u n $end
$var reg 32 v RESULT [31:0] $end
$upscope $end
$scope module FWD_DIN_MUX $end
$var wire 32 w D0 [31:0] $end
$var wire 1 ? SEL $end
$var wire 32 x D1 [31:0] $end
$var parameter 32 y n $end
$var reg 32 z DOUT [31:0] $end
$upscope $end
$scope module FWD_RS1_MUX $end
$var wire 32 { D1 [31:0] $end
$var wire 32 | D2 [31:0] $end
$var wire 2 } SEL [1:0] $end
$var wire 32 ~ D3 [31:0] $end
$var wire 32 !" D0 [31:0] $end
$var parameter 32 "" n $end
$var reg 32 #" DOUT [31:0] $end
$upscope $end
$scope module FWD_RS2_MUX $end
$var wire 32 $" D1 [31:0] $end
$var wire 32 %" D2 [31:0] $end
$var wire 2 &" SEL [1:0] $end
$var wire 32 '" D3 [31:0] $end
$var wire 32 (" D0 [31:0] $end
$var parameter 32 )" n $end
$var reg 32 *" DOUT [31:0] $end
$upscope $end
$scope module FWD_SRCA_MUX $end
$var wire 32 +" D0 [31:0] $end
$var wire 1 < SEL $end
$var wire 32 ," D1 [31:0] $end
$var parameter 32 -" n $end
$var reg 32 ." DOUT [31:0] $end
$upscope $end
$scope module FWD_SRCB_MUX $end
$var wire 32 /" D0 [31:0] $end
$var wire 1 ; SEL $end
$var wire 32 0" D1 [31:0] $end
$var parameter 32 1" n $end
$var reg 32 2" DOUT [31:0] $end
$upscope $end
$scope module HAZ_CTRL $end
$var wire 1 ! CLK $end
$var wire 5 3" D_ADDR1 [4:0] $end
$var wire 5 4" D_ADDR2 [4:0] $end
$var wire 7 5" D_OP [6:0] $end
$var wire 5 6" D_WADDR [4:0] $end
$var wire 5 7" E_ADDR1 [4:0] $end
$var wire 5 8" E_ADDR2 [4:0] $end
$var wire 7 9" E_OP [6:0] $end
$var wire 5 :" E_WADDR [4:0] $end
$var wire 5 ;" F_ADDR1 [4:0] $end
$var wire 5 <" F_ADDR2 [4:0] $end
$var wire 7 =" F_OP [6:0] $end
$var wire 5 >" F_WADDR [4:0] $end
$var wire 5 ?" M_ADDR1 [4:0] $end
$var wire 5 @" M_ADDR2 [4:0] $end
$var wire 7 A" M_OP [6:0] $end
$var wire 5 B" M_WADDR [4:0] $end
$var wire 5 C" W_ADDR1 [4:0] $end
$var wire 5 D" W_ADDR2 [4:0] $end
$var wire 7 E" W_OP [6:0] $end
$var wire 5 F" W_WADDR [4:0] $end
$var wire 1 G" ed_fwd1 $end
$var wire 1 H" ed_fwd2 $end
$var wire 1 I" load_use_stall $end
$var wire 1 J" md_fwd1 $end
$var wire 1 K" md_fwd2 $end
$var wire 1 L" wd_fwd1 $end
$var wire 1 M" wd_fwd2 $end
$var wire 1 N" we_load_fwd1 $end
$var wire 1 O" we_load_fwd2 $end
$var wire 1 P" wm_load_fwd2 $end
$var wire 1 Q" jal $end
$var wire 1 R" flush_jalr $end
$var reg 1 @ FLUSH $end
$var reg 1 ? FWD_DIN $end
$var reg 2 S" FWD_RS1 [1:0] $end
$var reg 2 T" FWD_RS2 [1:0] $end
$var reg 1 < FWD_SRCA $end
$var reg 1 ; FWD_SRCB $end
$var reg 2 U" PC_SEL [1:0] $end
$var reg 1 % STALL $end
$upscope $end
$scope module IMM_GEN $end
$var wire 3 V" IMM_SEL [2:0] $end
$var wire 25 W" IR [24:0] $end
$var wire 32 X" U_TYPE [31:0] $end
$var wire 32 Y" S_TYPE [31:0] $end
$var wire 32 Z" J_TYPE [31:0] $end
$var wire 32 [" I_TYPE [31:0] $end
$var wire 32 \" B_TYPE [31:0] $end
$var reg 32 ]" IMM [31:0] $end
$upscope $end
$scope module PC_MUX $end
$var wire 32 ^" D0 [31:0] $end
$var wire 32 _" D1 [31:0] $end
$var wire 32 `" D2 [31:0] $end
$var wire 32 a" D3 [31:0] $end
$var wire 2 b" SEL [1:0] $end
$var parameter 32 c" n $end
$var reg 32 d" DOUT [31:0] $end
$upscope $end
$scope module PROG_COUNTER $end
$var wire 1 ! CLK $end
$var wire 1 e" PC_EN $end
$var wire 32 f" PC_IN [31:0] $end
$var wire 1 " RST $end
$var reg 32 g" PC_OUT [31:0] $end
$upscope $end
$scope module PROG_MEMORY $end
$var wire 14 h" ADDR [13:0] $end
$var wire 1 i" RDEN $end
$var parameter 32 j" ADDR_DEPTH $end
$var reg 32 k" MEM_OUT [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 l" ADDR1 [4:0] $end
$var wire 5 m" ADDR2 [4:0] $end
$var wire 1 ! CLK $end
$var wire 5 n" W_ADDR [4:0] $end
$var wire 1 o" W_EN $end
$var wire 32 p" W_DATA [31:0] $end
$var reg 32 q" RS1 [31:0] $end
$var reg 32 r" RS2 [31:0] $end
$upscope $end
$scope module RF_MUX $end
$var wire 32 s" D0 [31:0] $end
$var wire 32 t" D1 [31:0] $end
$var wire 32 u" D2 [31:0] $end
$var wire 32 v" D3 [31:0] $end
$var wire 2 w" SEL [1:0] $end
$var parameter 32 x" n $end
$var reg 32 y" DOUT [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 x"
b1110 j"
b100000 c"
b100000 1"
b100000 -"
b100000 )"
b100000 ""
b100000 y
b100000 u
b10000000000000 n
b100000 m
b1110 l
b100000 Y
b100000 R
$end
#0
$dumpvars
bx y"
bx w"
bx v"
bx u"
bz t"
bx s"
b0 r"
b0 q"
bx p"
xo"
bx n"
bx m"
bx l"
bx k"
1i"
bx h"
bx g"
bx f"
1e"
bx d"
b0 b"
bz a"
bz `"
bx _"
bx ^"
bx ]"
bx0 \"
bx ["
bx0 Z"
bx Y"
bx000000000000 X"
bx W"
b0 V"
b0 U"
b0 T"
b0 S"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 0"
bx /"
bx ."
bx ,"
bx +"
b0 *"
b0 ("
bx '"
b0 &"
bx %"
b0 $"
b0 #"
b0 !"
bx ~
b0 }
bx |
b0 {
bx z
bx x
bx w
b0 v
bx t
bx s
bx r
bx q
bx p
bx o
bx k
bx j
xi
xh
xg
bx f
bx e
b0 d
b0 c
bx b
b0 a
b0 `
b0 _
b0 ^
bx ]
x\
bx [
bx Z
bx X
bx W
b0 V
bx U
bx T
bx S
bx Q
xP
bx O
bx N
bx M
bx L
bx K
b0 J
bx I
bx H
b0 G
b0 F
0E
b0 D
bx C
bx B
bx A
0@
0?
b0 >
b0 =
0<
0;
bx :
b0 9
bx 8
07
06
05
bx 4
bx 3
bx 2
b0 1
00
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
b0 (
bx '
bx &
0%
bx $
1#
x"
x!
$end
#5000
0!
#10000
b0 H
b0 Z
b0 t
b0 I
b0 S
b0 s
1#
b0 G
b0 v
b0 {
b0 $"
b0 &
b0 X
b0 2"
b0 '
b0 Q
b0 ."
b0 W
0P
b0 r
b0 /"
b0 +"
b0 |
b0 %"
b10000000000000 j
b0 e
b0 A
b0 o
b0 u"
bx0000000000000000000000000000000000000000000000000000000000000000xxxxxxxxxxxxxxx000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000000000xx K
bx000000000000000000000000000000001xxxxxxxxxxxx L
0"
1!
#15000
0!
#20000
b0 p
b0xxxxxxxx q
b0 B
b0 k
b0 z
b0 v"
b0 f
0h
0g
0i
b0 w
bx00000000000000000000000000000000xxxxxxxxxxxxx N
bx0000000000000000000000000000000000000000000000000000000000000000xxxxxxxxxxxxxxx000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000000000000000000000000000100000xxxxxxx L
1!
#25000
0!
#30000
0o"
b0 w"
bx0000000000000000000000000000000000000000000000000000000000000000xxxxxxxxxxxxxxx000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000000000000000000000000000xxxxxxxxxxxxx N
1!
#35000
0!
#40000
1!
#45000
0!
#50000
1!
#55000
0!
#60000
1!
#65000
0!
#70000
1!
#75000
0!
#80000
1!
#85000
0!
#90000
1!
#95000
0!
#100000
1!
#105000
0!
#110000
1!
#115000
0!
#120000
1!
#125000
0!
#130000
1!
#135000
0!
#140000
1!
#145000
0!
#150000
1!
#155000
0!
#160000
1!
#165000
0!
#170000
1!
#175000
0!
#180000
1!
#185000
0!
#190000
1!
#195000
0!
#200000
1!
#205000
0!
#210000
1!
#215000
0!
#220000
1!
#225000
0!
#230000
1!
#235000
0!
#240000
1!
#245000
0!
#250000
1!
#255000
0!
#260000
1!
#265000
0!
#270000
1!
#275000
0!
#280000
1!
#285000
0!
#290000
1!
#295000
0!
#300000
1!
#305000
0!
#310000
1!
#315000
0!
#320000
1!
#325000
0!
#330000
1!
#335000
0!
#340000
1!
#345000
0!
#350000
1!
#355000
0!
#360000
1!
#365000
0!
#370000
1"
1!
#375000
0!
#380000
b0 h"
b100 3
b100 d"
b100 f"
b100 4
b100 ^"
b0 2
b0 g"
1!
